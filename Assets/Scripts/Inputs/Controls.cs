//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""DualShock4"",
            ""id"": ""984661ff-e477-404c-9f73-94bf3183ba00"",
            ""actions"": [
                {
                    ""name"": ""Pular"",
                    ""type"": ""Button"",
                    ""id"": ""21b83a13-2758-4110-9cb1-29307ed9885c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca0d0694-ae42-4611-ae64-512c6a1da525"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pular"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DualShock4
        m_DualShock4 = asset.FindActionMap("DualShock4", throwIfNotFound: true);
        m_DualShock4_Pular = m_DualShock4.FindAction("Pular", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DualShock4
    private readonly InputActionMap m_DualShock4;
    private List<IDualShock4Actions> m_DualShock4ActionsCallbackInterfaces = new List<IDualShock4Actions>();
    private readonly InputAction m_DualShock4_Pular;
    public struct DualShock4Actions
    {
        private @Controls m_Wrapper;
        public DualShock4Actions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pular => m_Wrapper.m_DualShock4_Pular;
        public InputActionMap Get() { return m_Wrapper.m_DualShock4; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DualShock4Actions set) { return set.Get(); }
        public void AddCallbacks(IDualShock4Actions instance)
        {
            if (instance == null || m_Wrapper.m_DualShock4ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DualShock4ActionsCallbackInterfaces.Add(instance);
            @Pular.started += instance.OnPular;
            @Pular.performed += instance.OnPular;
            @Pular.canceled += instance.OnPular;
        }

        private void UnregisterCallbacks(IDualShock4Actions instance)
        {
            @Pular.started -= instance.OnPular;
            @Pular.performed -= instance.OnPular;
            @Pular.canceled -= instance.OnPular;
        }

        public void RemoveCallbacks(IDualShock4Actions instance)
        {
            if (m_Wrapper.m_DualShock4ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDualShock4Actions instance)
        {
            foreach (var item in m_Wrapper.m_DualShock4ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DualShock4ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DualShock4Actions @DualShock4 => new DualShock4Actions(this);
    public interface IDualShock4Actions
    {
        void OnPular(InputAction.CallbackContext context);
    }
}
